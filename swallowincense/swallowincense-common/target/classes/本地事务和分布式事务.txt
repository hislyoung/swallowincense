本地事务：
    1、原子性，一致性，隔离性，持久性
    2、读未提交、读已提交（脏读）、可重复读（脏读、不可重复读）、可串行化（脏读、不可重复读和幻读）
    3、事务的传播行为：默认为复用上一个事务执行新的事务，也可以是开辟一个新的事务去执行当前事务
    4、@Transactional()
    属性                         说明

    propagation                  事务的传播行为，默认值为 REQUIRED。

    isolation                    事务的隔离度，默认值采用 DEFAULT

    timeout                      事务的超时时间，默认值为-1，不超时。 如果设置了超时时间(单位秒)，那么如果超过该时间限制了但事务还没有完成，则自动回滚事务。

    read-only                    指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 true。

    rollbackFor                  用于指定能够触发事务回滚的异常类型，如果有多个异常类型需要指定，各类型之间可以通过逗号分隔。{xxx1.class, xxx2.class,……}

    noRollbackFor                抛出 no-rollback-for 指定的异常类型，不回滚事务。{xxx1.class, xxx2.class,……}
 SpringBoot下的事务
    1、如果事务A调用当前服务下的事务B、事务C，会导致事务B、C的@Transactional设置失效，spring的事务是基于AOP实现的，只需要导入Start-AOP包
    内部有AspectJ,通过AOP对象来调用B、C事务即可
    2、不可注入当前的服务，并以当前的服务去调用，会引发循环依赖
分布式事务
    1、由于远程调用的原因，不会感知到对方是否执行成功，而且就算事务A感知到事务C有异常回滚，已完成的事务B也不会回滚
    2、C 一致性 A 可用性 P 分区容错性
        2.1、系统只可能是CP、AP的
    3、Raft算法（选举）
        3.1、leader 领导者
             follower 跟随者
             candidate 候选者
        3.2、领导选举+日志复制
            首先选举超时（也叫自旋时间）在150-300MS之间没有收到命令由于时间是随机的，自旋最快的会发起一轮选举，投票成功会重置自旋时间
        建立好关系之后会一直维系心跳连接 当出现平票会进入下一轮选举 term+1 心跳时间发送日志，同步节点数据
        3.3、分区容错性
            假如有五个节点组成的集群，突然网络分区了，A区，三个一组，B区二个一组，此时A区，B区都会选举一个领导，B区的老领导不会保存数据（多数派原则）
            A区新产生的领导依然会保存数据（多数派原则），当网络修好之后，所有节点会同步term最高（最新的）领导节点的数据 （大多数节点=总结点/2+1）
    4、BASE理论保证AP和最终一致性
        4.1、基本可用BA 指集群出现故障的时候，允许损失部分的可用性（响应时间、功能的可用），其不等于不可用
            响应时间的损失：处理请求的时间增加了
            功能上的损失：高并发的时候引导到降级页面
        4.2、软状态S 允许系统存在中间态（不是成与不成的黑白态），分布式中一般一份数据保留有多个副本，允许系统同步数据的延迟就是软状态
        4.3、最终一致性E 经过一段时间后，最终能够达到一致性状态
分布式事务方案
    1、刚性事务-2PC-两段提交 事务提交前，总事务会寻问小事务是否准备好，若均返回是则发起事务，否则回滚
        优点：商业数据库支持好使用简单
        缺点：不适合大型系统，尤其高并发占用资源多，影响很大
    2、柔性事务-BASE理论（最终一致性）
        2.1、TCC事务补偿方案
            所有业务逻辑分为三段（try、confirm、cancel），分为三步执行，try所有事务准备数据，confirm所有数据提交数据，有异常执行回滚cancel
            cancel是对之前的补偿，业务加2则回滚cancel减2
        2.2、最大努力通知，有异常的主业务发送消息到队列topic，其他方法订阅此消息进行回滚，适用于第三方整合，设置一个最大发送消息次数
        2.3、可靠消息+最终一致性 在处理业务之前，像消息队列发送消息，实时消息只记录数据，不是真发送。业务提交之后，确认是否发送，得到指令在发送
    Seata控制分布式事务
        1、每一个微服务创建一个UNDO_LOG表记录日志
        2、下载安装事务协调器TC seata-server
        3、导入依赖 alibaba-seata seata-all 0.7.1
        4、修改register.config文件指定注册中心及配置中心 启动服务器
        5、在主业务上@GlobalTransactional
        6、所有想要用到分布式事务的微服务都需要使用seata的DataSourceProxy代理自己的数据源 参照MySeataConfig
        7、每个微服务都导入file.config和register.config
        8、修改名称与application.name一致